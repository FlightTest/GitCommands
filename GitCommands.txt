//  CLONE A REPO
******************
git clone <ssh key or https> <AliasRepoName for folder>
git clone -b <branchName> --single-branch <ssh key>
git clone -b <branchName> <ssh key> (clones entire repo and checks out  specified branch)

// CHECKOUT (SWITCH TO) A BRANCH
******************
git checkout <branch>
git checkout -b <branchName> (creates new branch)
git checkout <filename> (resets file to last commit version)
git checkout <commit> <filename> (checks out filename from specific commit)
git checkout . (resets only on current directory and below)
git checkout -b <newBranchName> <fromBranchName> (creates new branch from another)

// MERGE CONFLICT RESOLUTION
******************
git checkout --ours <fileName>
git checkout --theirs <fileName>


// RESETING CHANGES 
*********************
https://opensource.com/article/18/6/git-reset-revert-rebase-commands

git reset . (removes staged files in current directory)
git reset <commitRef> (reset branch tip to commitRef and leave modified files unstaged)
git reset --soft <commitRef> (reset branch tip to commitRef and leave modified files staged)
git reset --hard <commitRef> (reset branch tip to commitRef and reset files to commitRef)
git reset --hard (resets all modified files)

// BRANCH VIEW AND MANIPULAITON
*****************************
git branch  (displays local branches)
git branch -a (displays all branches including tracked remotes)
git branch -m <oldName> <newName> (renames local branch)
git branch -m <newName> (renames current branch)
git branch -d <branchName> (deletes branch)
git branch -D <branchName> (deletes an unmerged branch)
git push origin --delete <branchName> (deletes remote branch)

// FETCH / PULL / PUSH / CHERRY-PICK
*****************************
git fetch (downloads branches and commits from upstream repo)
git fetch -p (The -p flag means "prune". After fetching, branches which no longer exist on the remote will be deleted.)
git pull (pulls changes from remote repo into current branch)
git pull . <branchName> (pulls from local branch)
git pull --squash . <branch> (pulls committed changes from <branch> into another branch without any of <branch> commit log.  Leaves the deltas staged)
git push . <branch_A>:<branch_B> (push to local branch)
git push -d origin <branch> deletes origin branch
git push --force-with-lease <branch> (push ammended commit message to remote)

git cherry-pick <commitID> (merges a specific commit)

// STAGING FILE CHANGES FOR COMMIT
****************************
git add -A  (stage all changes)
git add -u (add all modified files, ignoring untracked files)

// COMMITING CHANGES
****************************
git commit -a (stages all modified and deleted files, does not include untracked files)
git commit -m "Commit Message"
git commit --amend (to ammend the last commit message if the commit hasn't yet been pushed)
git push --force <remoteName (origin)> <branchName> (pushes amended commit message upstream)

CREATE AND ADD A REMOTE REPO
****************************
git init --bare <remote repo name>
cd <local repo path>
git remote add <origin(Alias)> <path or URL to remote>
git remote -v (shows origin alias and path)
*** git pull origin master --allow-unrelated-histories  (optional: pull in any items before pushing)
git push -u <origin(Alias)> <branchName> (sets upstream tracking branch and pushes to it)
git branch -a (shows the new remote branch being tracked)
git remote remove <originAlias> (removes remote from local)

// STASHING CHANGES SO YOU CAN CHECKOUT ANOTHER BRANCH WIHTOUT COMMITING THOSE CHANGES
*****************************************
git stash
git stash list (shows stashes)
git stash pop (applies last stash)

// GIT STATUS 
****************************
git status (shows status of current branch)
git status -uno (only shows modified repo items, not untracked files; means untracked=no)
git status .  (shows only the status of the current directory files)
git status "<*textToMatch*>

// FILE & FOLDER OPERATIONS
***************************
git ls-files <*filenames*>  (shows files tracked by git)
git mv <oldFilename> <newFilename>
git rm <oldFilename>
git clean -f (remove untracked files)

// DIFF FILES AND BRANCHES
**************************
https://devconnected.com/how-to-compare-two-git-branches/
git diff <branch1>..<branch2> (compare the differences between the two branches.)
git diff <branch1>...<branch2> (compares the top of the right branch (the HEAD) with the common ancestor of the two branches.)
git diff <branch1>...<branch2> -- <filename>  (compares just the file named.  The -- indicates the end of command line flags.)
git diff-tree --no-commit-id --name-only -r <commit> (shows the file paths of all files changed in commit)
git diff --staged <filename> (shows diff for stated files)
git show <commit>  (shows all changes made in commit, from a diff perspective)

// LOG
**************************
git log --all --decorate --oneline --graph (git ADOG acronym)
git log -<N> (shows last N log entries)

// CONFIG
**************************
git config --global core.editor nedit
git config --global core.editor "C:\Program Files (x86)\Notepad++\notepad++.exe" -multiInst -notabbar -nosession -noPlugin
